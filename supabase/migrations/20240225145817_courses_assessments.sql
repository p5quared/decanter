drop policy "All insert" on "public"."request_errors";

revoke delete on table "public"."request_errors" from "anon";

revoke insert on table "public"."request_errors" from "anon";

revoke references on table "public"."request_errors" from "anon";

revoke select on table "public"."request_errors" from "anon";

revoke trigger on table "public"."request_errors" from "anon";

revoke truncate on table "public"."request_errors" from "anon";

revoke update on table "public"."request_errors" from "anon";

revoke delete on table "public"."request_errors" from "authenticated";

revoke insert on table "public"."request_errors" from "authenticated";

revoke references on table "public"."request_errors" from "authenticated";

revoke select on table "public"."request_errors" from "authenticated";

revoke trigger on table "public"."request_errors" from "authenticated";

revoke truncate on table "public"."request_errors" from "authenticated";

revoke update on table "public"."request_errors" from "authenticated";

revoke delete on table "public"."request_errors" from "service_role";

revoke insert on table "public"."request_errors" from "service_role";

revoke references on table "public"."request_errors" from "service_role";

revoke select on table "public"."request_errors" from "service_role";

revoke trigger on table "public"."request_errors" from "service_role";

revoke truncate on table "public"."request_errors" from "service_role";

revoke update on table "public"."request_errors" from "service_role";

alter table "public"."request_errors" drop constraint "request_errors_pkey";

drop index if exists "public"."request_errors_pkey";

drop table "public"."request_errors";

create table "public"."courses_assessments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "course_id" text,
    "assessment_id" text
);


alter table "public"."courses_assessments" enable row level security;

create table "public"."errors" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "url" text,
    "status" text,
    "error" text,
    "code" smallint
);


alter table "public"."errors" enable row level security;

CREATE UNIQUE INDEX course_assessment_pkey ON public.courses_assessments USING btree (id);

CREATE UNIQUE INDEX request_errors_pkey ON public.errors USING btree (id);

alter table "public"."courses_assessments" add constraint "course_assessment_pkey" PRIMARY KEY using index "course_assessment_pkey";

alter table "public"."errors" add constraint "request_errors_pkey" PRIMARY KEY using index "request_errors_pkey";

grant delete on table "public"."courses_assessments" to "anon";

grant insert on table "public"."courses_assessments" to "anon";

grant references on table "public"."courses_assessments" to "anon";

grant select on table "public"."courses_assessments" to "anon";

grant trigger on table "public"."courses_assessments" to "anon";

grant truncate on table "public"."courses_assessments" to "anon";

grant update on table "public"."courses_assessments" to "anon";

grant delete on table "public"."courses_assessments" to "authenticated";

grant insert on table "public"."courses_assessments" to "authenticated";

grant references on table "public"."courses_assessments" to "authenticated";

grant select on table "public"."courses_assessments" to "authenticated";

grant trigger on table "public"."courses_assessments" to "authenticated";

grant truncate on table "public"."courses_assessments" to "authenticated";

grant update on table "public"."courses_assessments" to "authenticated";

grant delete on table "public"."courses_assessments" to "service_role";

grant insert on table "public"."courses_assessments" to "service_role";

grant references on table "public"."courses_assessments" to "service_role";

grant select on table "public"."courses_assessments" to "service_role";

grant trigger on table "public"."courses_assessments" to "service_role";

grant truncate on table "public"."courses_assessments" to "service_role";

grant update on table "public"."courses_assessments" to "service_role";

grant delete on table "public"."errors" to "anon";

grant insert on table "public"."errors" to "anon";

grant references on table "public"."errors" to "anon";

grant select on table "public"."errors" to "anon";

grant trigger on table "public"."errors" to "anon";

grant truncate on table "public"."errors" to "anon";

grant update on table "public"."errors" to "anon";

grant delete on table "public"."errors" to "authenticated";

grant insert on table "public"."errors" to "authenticated";

grant references on table "public"."errors" to "authenticated";

grant select on table "public"."errors" to "authenticated";

grant trigger on table "public"."errors" to "authenticated";

grant truncate on table "public"."errors" to "authenticated";

grant update on table "public"."errors" to "authenticated";

grant delete on table "public"."errors" to "service_role";

grant insert on table "public"."errors" to "service_role";

grant references on table "public"."errors" to "service_role";

grant select on table "public"."errors" to "service_role";

grant trigger on table "public"."errors" to "service_role";

grant truncate on table "public"."errors" to "service_role";

grant update on table "public"."errors" to "service_role";

create policy "No deletes"
on "public"."courses_assessments"
as permissive
for delete
to public
using (true);


create policy "anon can insert"
on "public"."courses_assessments"
as permissive
for insert
to anon
with check (true);


create policy "All insert"
on "public"."errors"
as permissive
for insert
to anon
with check (true);



